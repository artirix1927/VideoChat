from auth_service.domain.models import User
from auth_service.domain.repositories.user import UserRepository
from auth_service.infrastructure.models import User as UserModel
from sqlalchemy.ext.asyncio import AsyncSession
from auth_service.infrastructure.mappers import user_from_model
from sqlalchemy.future import select


class SQLAlchemyUserRepository(UserRepository):
    def __init__(self, session: AsyncSession):
        self.session = session

    async def get_by_id(self, user_id: str) -> User:
        user_model = await self.session.get(UserModel, user_id)
        return user_from_model(user_model) if user_model else None

    async def get_by_ids(self, user_ids: list[int]) -> list[User]:
        if not user_ids:
            return []

        stmt = select(UserModel).where(UserModel.id.in_(user_ids))
        result = await self.session.execute(stmt)
        user_models = result.scalars().all()

        return [user_from_model(model) for model in user_models]

    async def get_by_username(self, username: str) -> User:
        stmt = select(UserModel).filter_by(username=username)
        result = await self.session.execute(stmt)
        user_model = result.scalars().first()
        return user_from_model(user_model) if user_model else None

    async def create_user(
        self, username: str, hashed_password: str, email: str
    ) -> User:
        user_entity = User.create_user(
            username=username, hashed_password=hashed_password, email=email
        )
        model = UserModel(
            username=user_entity.username,
            hashed_password=user_entity.hashed_password,
            email=email,
        )
        self.session.add(model)
        await self.session.commit()
        await self.session.refresh(model)  # refresh to get autogenerated fields like id
        return user_from_model(model)

    async def save(self, user: User):
        user_orm = await self.session.get(UserModel, user.id)
        if user_orm:
            user_orm.hashed_password = user.hashed_password
            user_orm.username = user.username
            self.session.add(user_orm)
            await self.session.commit()
            return user

        return await self.create_user(user.username, user.hashed_password)

    async def delete(self, user: User):
        await self.delete_by_id(id=user.id)

    async def delete_by_id(self, id: User):
        user_orm = await self.session.get(UserModel, id)
        if user_orm:
            self.session.delete(user_orm)
            await self.session.commit()
