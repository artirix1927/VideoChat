from datetime import datetime
from domain.models import RefreshToken
from infrastructure.models import RefreshToken as RefreshTokenModel
from domain.repositories.refresh_token import RefreshTokenRepository
from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from infrastructure.mappers import refresh_token_from_model


class SQLAlchemyRefreshTokenRepository(RefreshTokenRepository):
    def __init__(self, session: AsyncSession):
        self.session = session

    async def create_or_update_refresh_token(
        self, token_str: str, user_id: str, exp: datetime
    ) -> RefreshToken:
        stmt = select(RefreshTokenModel).filter_by(user_id=user_id)
        result = await self.session.execute(stmt)
        token = result.scalars().first()

        if token:
            token.token = token_str
            token.expires_at = exp
            await self.session.commit()
            return refresh_token_from_model(token)

        new_token = RefreshTokenModel(user_id=user_id, token=token_str, expires_at=exp)
        self.session.add(new_token)
        await self.session.commit()
        await self.session.refresh(new_token)  # load autogenerated fields if any

        return refresh_token_from_model(new_token)

    async def get_refresh_token_by_token_str(self, token_str: str) -> RefreshToken:
        stmt = select(RefreshTokenModel).filter_by(token=token_str)
        result = await self.session.execute(stmt)
        token = result.scalars().first()
        return refresh_token_from_model(token)
